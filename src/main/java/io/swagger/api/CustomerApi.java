/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.26).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Cart;
import io.swagger.model.Customer;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2022-02-23T19:11:12.961Z")

@Validated
@Api(value = "customer", description = "the customer API")
@RequestMapping(value = "/v1/")
public interface CustomerApi {

    @ApiOperation(value = "Create a new Cart", nickname = "addDishToCart", notes = "Creating a new Cart", tags={ "Customer Adding Dish", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Order created successfully"),
        @ApiResponse(code = 400, message = "Invalid request") })
    @RequestMapping(value = "/customer/{customerId}/restaurant/{restaurantId}/dish/{dishId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addDishToCart(@ApiParam(value = "Transaction object" ,required=true )  @Valid @RequestBody Cart body,@ApiParam(value = "customer Id in the context path",required=true) @PathVariable("customerId") Integer customerId,@ApiParam(value = "Restaurant Id in the context path",required=true) @PathVariable("restaurantId") Integer restaurantId,@ApiParam(value = "dish Id in the context path",required=true) @PathVariable("dishId") Integer dishId,@ApiParam(value = "Metadata about the request { \"requestId\": \"237e9877-e79b-12d4-a765-321741963000\", \"language\": \"en\", \"clientApp\": \"clientAppId provided\", \"requestTime\": \"yyyy-MM-dd HH:mm:ss\"  }" ) @RequestHeader(value="REQUEST-METADATA", required=false) String REQUEST_METADATA,@ApiParam(value = "" ) @RequestHeader(value="X-ENABLE-EXCEPTION-TRACE", required=false) Boolean X_ENABLE_EXCEPTION_TRACE);


    @ApiOperation(value = "Create a new Order", nickname = "createOrder", notes = "Creating a new Order using cart", tags={ "Customer Order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Order created successfully"),
        @ApiResponse(code = 400, message = "Invalid request") })
    @RequestMapping(value = "/customer/{customerId}/restaurant/{restaurantId}/cart/{cartID}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createOrder(@ApiParam(value = "customer Id in the context path",required=true) @PathVariable("customerId") Integer customerId,@ApiParam(value = "Restaurant Id in the context path",required=true) @PathVariable("restaurantId") Integer restaurantId,@ApiParam(value = "customer Id in the context path",required=true) @PathVariable("cartID") Integer cartID,@ApiParam(value = "Metadata about the request { \"requestId\": \"237e9877-e79b-12d4-a765-321741963000\", \"language\": \"en\", \"clientApp\": \"clientAppId provided\", \"requestTime\": \"yyyy-MM-dd HH:mm:ss\"  }" ) @RequestHeader(value="REQUEST-METADATA", required=false) String REQUEST_METADATA,@ApiParam(value = "" ) @RequestHeader(value="X-ENABLE-EXCEPTION-TRACE", required=false) Boolean X_ENABLE_EXCEPTION_TRACE);


    @ApiOperation(value = "customer Delete", nickname = "deletecustomerId", notes = "", tags={ "customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Invalid customer Id supplied"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "transaction not found") })
    @RequestMapping(value = "/customer/{customerId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deletecustomerId(@ApiParam(value = "The name that needs to be deleted",required=true) @PathVariable("customerId") String customerId);


    @ApiOperation(value = "Get a customer by customerId", nickname = "getCustomerId", notes = "", response = Customer.class, tags={ "customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Customer.class),
        @ApiResponse(code = 400, message = "Invalid customer Id supplied"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "transaction not found") })
    @RequestMapping(value = "/customer/{customerId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Customer> getCustomerId(@ApiParam(value = "customer Id in the context path",required=true) @PathVariable("customerId") Integer customerId);


    @ApiOperation(value = "Create a new Payment", nickname = "makingPaymentForOrder", notes = "Creating a Payment for Order ", tags={ "Customer Making Payment for Order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Order created successfully"),
        @ApiResponse(code = 400, message = "Invalid request") })
    @RequestMapping(value = "/customer/{customerId}/order/{orderId}/payment/{paymentId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> makingPaymentForOrder(@ApiParam(value = "customer Id in the context path",required=true) @PathVariable("customerId") Integer customerId,@ApiParam(value = "Restaurant Id in the context path",required=true) @PathVariable("orderId") Integer orderId,@ApiParam(value = "dish Id in the context path",required=true) @PathVariable("paymentId") Integer paymentId,@ApiParam(value = "Metadata about the request { \"requestId\": \"237e9877-e79b-12d4-a765-321741963000\", \"language\": \"en\", \"clientApp\": \"clientAppId provided\", \"requestTime\": \"yyyy-MM-dd HH:mm:ss\"  }" ) @RequestHeader(value="REQUEST-METADATA", required=false) String REQUEST_METADATA,@ApiParam(value = "" ) @RequestHeader(value="X-ENABLE-EXCEPTION-TRACE", required=false) Boolean X_ENABLE_EXCEPTION_TRACE);


    @ApiOperation(value = "Update customer", nickname = "updatecustomer", notes = "Updating the customer.", response = Customer.class, tags={ "customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Customer.class),
        @ApiResponse(code = 400, message = "Invalid transaction Id supplied"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "customer not found") })
    @RequestMapping(value = "/customer/{customerId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Customer> updatecustomer(@ApiParam(value = "customerId that need to be updated",required=true) @PathVariable("customerId") String customerId,@ApiParam(value = "Updated transaction object" ,required=true )  @Valid @RequestBody Customer body);

}
