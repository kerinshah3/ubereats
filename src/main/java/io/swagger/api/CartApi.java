/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.26).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Cart;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2022-02-23T19:11:12.961Z")

@Validated
@Api(value = "Cart", description = "the Cart API")
@RequestMapping(value = "/v1/")
public interface CartApi {

    @ApiOperation(value = "Cart Delete", nickname = "deleteCartId", notes = "", tags={ "Cart", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Invalid Cart Id supplied"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "transaction not found") })
    @RequestMapping(value = "/Cart/{CartId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteCartId(@ApiParam(value = "The name that needs to be deleted",required=true) @PathVariable("CartId") String cartId);


    @ApiOperation(value = "Get a Cart by CartId", nickname = "getCartId", notes = "", response = Cart.class, tags={ "Cart", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Cart.class),
        @ApiResponse(code = 400, message = "Invalid Cart Id supplied"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "transaction not found") })
    @RequestMapping(value = "/Cart/{CartId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Cart> getCartId(@ApiParam(value = "Cart Id in the context path",required=true) @PathVariable("CartId") Integer cartId);


    @ApiOperation(value = "Update Cart Id ", nickname = "updateCart", notes = "Updating the Cart Id.", response = Cart.class, tags={ "Cart", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Cart.class),
        @ApiResponse(code = 400, message = "Invalid transaction Id supplied"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Cart not found") })
    @RequestMapping(value = "/Cart/{CartId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Cart> updateCart(@ApiParam(value = "CartId that need to be updated",required=true) @PathVariable("CartId") String cartId,@ApiParam(value = "Updated transaction object" ,required=true )  @Valid @RequestBody Cart body);

}
